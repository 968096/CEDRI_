/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_CEDRI_MEASUREMENT_PB_H_INCLUDED
#define PB_CEDRI_MEASUREMENT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum para identificar o perfil do heater (use vírgula, não ponto e vírgula!) */
typedef enum _cedri_HeaterProfile {
    cedri_HeaterProfile_HP_354 = 0,
    cedri_HeaterProfile_HP_301 = 1,
    cedri_HeaterProfile_HP_321 = 2,
    cedri_HeaterProfile_HP_322 = 3,
    cedri_HeaterProfile_HP_323 = 4,
    cedri_HeaterProfile_HP_324 = 5,
    cedri_HeaterProfile_HP_331 = 6,
    cedri_HeaterProfile_HP_332 = 7
} cedri_HeaterProfile;

/* Struct definitions */
/* Mensagem completa: UM sensor + dados de GPS + Volume calculado (ToF) */
typedef struct _cedri_SensorGpsReading {
    uint32_t device_id;
    uint32_t location_id;
    uint32_t sensor_id;
    cedri_HeaterProfile heater_profile;
    uint32_t measurement_step;
    float temp_c;
    float humidity_pct;
    float pressure_hpa;
    uint32_t gas_resistance_ohm;
    bool gas_valid;
    bool heat_stable;
    uint32_t timestamp;
    float latitude;
    float longitude;
    float volume_l; /* Volume calculado pelo ToF (em litros; -1.0 indica erro) */
} cedri_SensorGpsReading;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cedri_HeaterProfile_MIN cedri_HeaterProfile_HP_354
#define _cedri_HeaterProfile_MAX cedri_HeaterProfile_HP_332
#define _cedri_HeaterProfile_ARRAYSIZE ((cedri_HeaterProfile)(cedri_HeaterProfile_HP_332+1))

#define cedri_SensorGpsReading_heater_profile_ENUMTYPE cedri_HeaterProfile


/* Initializer values for message structs */
#define cedri_SensorGpsReading_init_default      {0, 0, 0, _cedri_HeaterProfile_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define cedri_SensorGpsReading_init_zero         {0, 0, 0, _cedri_HeaterProfile_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define cedri_SensorGpsReading_device_id_tag     1
#define cedri_SensorGpsReading_location_id_tag   2
#define cedri_SensorGpsReading_sensor_id_tag     3
#define cedri_SensorGpsReading_heater_profile_tag 4
#define cedri_SensorGpsReading_measurement_step_tag 5
#define cedri_SensorGpsReading_temp_c_tag        6
#define cedri_SensorGpsReading_humidity_pct_tag  7
#define cedri_SensorGpsReading_pressure_hpa_tag  8
#define cedri_SensorGpsReading_gas_resistance_ohm_tag 9
#define cedri_SensorGpsReading_gas_valid_tag     10
#define cedri_SensorGpsReading_heat_stable_tag   11
#define cedri_SensorGpsReading_timestamp_tag     12
#define cedri_SensorGpsReading_latitude_tag      13
#define cedri_SensorGpsReading_longitude_tag     14
#define cedri_SensorGpsReading_volume_l_tag      15

/* Struct field encoding specification for nanopb */
#define cedri_SensorGpsReading_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   location_id,       2) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,         3) \
X(a, STATIC,   SINGULAR, UENUM,    heater_profile,    4) \
X(a, STATIC,   SINGULAR, UINT32,   measurement_step,   5) \
X(a, STATIC,   SINGULAR, FLOAT,    temp_c,            6) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity_pct,      7) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure_hpa,      8) \
X(a, STATIC,   SINGULAR, UINT32,   gas_resistance_ohm,   9) \
X(a, STATIC,   SINGULAR, BOOL,     gas_valid,        10) \
X(a, STATIC,   SINGULAR, BOOL,     heat_stable,      11) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,        12) \
X(a, STATIC,   SINGULAR, FLOAT,    latitude,         13) \
X(a, STATIC,   SINGULAR, FLOAT,    longitude,        14) \
X(a, STATIC,   SINGULAR, FLOAT,    volume_l,         15)
#define cedri_SensorGpsReading_CALLBACK NULL
#define cedri_SensorGpsReading_DEFAULT NULL

extern const pb_msgdesc_t cedri_SensorGpsReading_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cedri_SensorGpsReading_fields &cedri_SensorGpsReading_msg

/* Maximum encoded size of messages (where known) */
#define CEDRI_MEASUREMENT_PB_H_MAX_SIZE          cedri_SensorGpsReading_size
#define cedri_SensorGpsReading_size              72

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
