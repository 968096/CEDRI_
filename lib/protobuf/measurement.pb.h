/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_CEDRI_MEASUREMENT_PB_H_INCLUDED
#define PB_CEDRI_MEASUREMENT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _cedri_HeaterProfile {
    cedri_HeaterProfile_HP_354 = 0,
    cedri_HeaterProfile_HP_301 = 1,
    cedri_HeaterProfile_HP_321 = 2,
    cedri_HeaterProfile_HP_322 = 3,
    cedri_HeaterProfile_HP_323 = 4,
    cedri_HeaterProfile_HP_324 = 5,
    cedri_HeaterProfile_HP_331 = 6,
    cedri_HeaterProfile_HP_332 = 7
} cedri_HeaterProfile;

/* Struct definitions */
typedef struct _cedri_SensorReading {
    uint32_t device_id;
    float battery;
    uint32_t version;
    float temp_c;
    float humidity_pct;
    float pressure_hpa;
    float latitude;
    float longitude;
    float volume_l;
} cedri_SensorReading;

typedef struct _cedri_VOCReading {
    uint32_t device_id;
    uint32_t sensor_id;
    cedri_HeaterProfile heater_profile;
    uint32_t gas_resistance_ohm;
} cedri_VOCReading;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cedri_HeaterProfile_MIN cedri_HeaterProfile_HP_354
#define _cedri_HeaterProfile_MAX cedri_HeaterProfile_HP_332
#define _cedri_HeaterProfile_ARRAYSIZE ((cedri_HeaterProfile)(cedri_HeaterProfile_HP_332+1))


#define cedri_VOCReading_heater_profile_ENUMTYPE cedri_HeaterProfile


/* Initializer values for message structs */
#define cedri_SensorReading_init_default         {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define cedri_VOCReading_init_default            {0, 0, _cedri_HeaterProfile_MIN, 0}
#define cedri_SensorReading_init_zero            {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define cedri_VOCReading_init_zero               {0, 0, _cedri_HeaterProfile_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define cedri_SensorReading_device_id_tag        1
#define cedri_SensorReading_battery_tag          2
#define cedri_SensorReading_version_tag          3
#define cedri_SensorReading_temp_c_tag           6
#define cedri_SensorReading_humidity_pct_tag     7
#define cedri_SensorReading_pressure_hpa_tag     8
#define cedri_SensorReading_latitude_tag         13
#define cedri_SensorReading_longitude_tag        14
#define cedri_SensorReading_volume_l_tag         15
#define cedri_VOCReading_device_id_tag           1
#define cedri_VOCReading_sensor_id_tag           3
#define cedri_VOCReading_heater_profile_tag      4
#define cedri_VOCReading_gas_resistance_ohm_tag  9

/* Struct field encoding specification for nanopb */
#define cedri_SensorReading_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, FLOAT,    battery,           2) \
X(a, STATIC,   SINGULAR, UINT32,   version,           3) \
X(a, STATIC,   SINGULAR, FLOAT,    temp_c,            6) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity_pct,      7) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure_hpa,      8) \
X(a, STATIC,   SINGULAR, FLOAT,    latitude,         13) \
X(a, STATIC,   SINGULAR, FLOAT,    longitude,        14) \
X(a, STATIC,   SINGULAR, FLOAT,    volume_l,         15)
#define cedri_SensorReading_CALLBACK NULL
#define cedri_SensorReading_DEFAULT NULL

#define cedri_VOCReading_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   sensor_id,         3) \
X(a, STATIC,   SINGULAR, UENUM,    heater_profile,    4) \
X(a, STATIC,   SINGULAR, UINT32,   gas_resistance_ohm,   9)
#define cedri_VOCReading_CALLBACK NULL
#define cedri_VOCReading_DEFAULT NULL

extern const pb_msgdesc_t cedri_SensorReading_msg;
extern const pb_msgdesc_t cedri_VOCReading_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cedri_SensorReading_fields &cedri_SensorReading_msg
#define cedri_VOCReading_fields &cedri_VOCReading_msg

/* Maximum encoded size of messages (where known) */
#define CEDRI_MEASUREMENT_PB_H_MAX_SIZE          cedri_SensorReading_size
#define cedri_SensorReading_size                 47
#define cedri_VOCReading_size                    20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
