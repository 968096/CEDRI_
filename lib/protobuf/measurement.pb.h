// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_measurement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_measurement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_measurement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_measurement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_measurement_2eproto;
namespace cedri {
class SensorReading;
struct SensorReadingDefaultTypeInternal;
extern SensorReadingDefaultTypeInternal _SensorReading_default_instance_;
class SensorReadingBatch;
struct SensorReadingBatchDefaultTypeInternal;
extern SensorReadingBatchDefaultTypeInternal _SensorReadingBatch_default_instance_;
}  // namespace cedri
PROTOBUF_NAMESPACE_OPEN
template<> ::cedri::SensorReading* Arena::CreateMaybeMessage<::cedri::SensorReading>(Arena*);
template<> ::cedri::SensorReadingBatch* Arena::CreateMaybeMessage<::cedri::SensorReadingBatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cedri {

// ===================================================================

class SensorReading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedri.SensorReading) */ {
 public:
  inline SensorReading() : SensorReading(nullptr) {}
  ~SensorReading() override;
  explicit constexpr SensorReading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorReading(const SensorReading& from);
  SensorReading(SensorReading&& from) noexcept
    : SensorReading() {
    *this = ::std::move(from);
  }

  inline SensorReading& operator=(const SensorReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorReading& operator=(SensorReading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorReading& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorReading* internal_default_instance() {
    return reinterpret_cast<const SensorReading*>(
               &_SensorReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorReading& a, SensorReading& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorReading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorReading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorReading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorReading& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorReading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedri.SensorReading";
  }
  protected:
  explicit SensorReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kLocationFieldNumber = 2,
    kHeaterProfileFieldNumber = 5,
    kVolumeLFieldNumber = 3,
    kSensorIdFieldNumber = 4,
    kMeasurementStepFieldNumber = 6,
    kTempCFieldNumber = 7,
    kHumidityPctFieldNumber = 8,
    kPressureHpaFieldNumber = 9,
    kGasResistanceOhmFieldNumber = 10,
    kGasValidFieldNumber = 11,
    kHeatStableFieldNumber = 12,
    kTimestampFieldNumber = 13,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string heater_profile = 5;
  void clear_heater_profile();
  const std::string& heater_profile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_heater_profile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_heater_profile();
  PROTOBUF_NODISCARD std::string* release_heater_profile();
  void set_allocated_heater_profile(std::string* heater_profile);
  private:
  const std::string& _internal_heater_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_heater_profile(const std::string& value);
  std::string* _internal_mutable_heater_profile();
  public:

  // float volume_l = 3;
  void clear_volume_l();
  float volume_l() const;
  void set_volume_l(float value);
  private:
  float _internal_volume_l() const;
  void _internal_set_volume_l(float value);
  public:

  // uint32 sensor_id = 4;
  void clear_sensor_id();
  uint32_t sensor_id() const;
  void set_sensor_id(uint32_t value);
  private:
  uint32_t _internal_sensor_id() const;
  void _internal_set_sensor_id(uint32_t value);
  public:

  // uint32 measurement_step = 6;
  void clear_measurement_step();
  uint32_t measurement_step() const;
  void set_measurement_step(uint32_t value);
  private:
  uint32_t _internal_measurement_step() const;
  void _internal_set_measurement_step(uint32_t value);
  public:

  // float temp_c = 7;
  void clear_temp_c();
  float temp_c() const;
  void set_temp_c(float value);
  private:
  float _internal_temp_c() const;
  void _internal_set_temp_c(float value);
  public:

  // float humidity_pct = 8;
  void clear_humidity_pct();
  float humidity_pct() const;
  void set_humidity_pct(float value);
  private:
  float _internal_humidity_pct() const;
  void _internal_set_humidity_pct(float value);
  public:

  // float pressure_hpa = 9;
  void clear_pressure_hpa();
  float pressure_hpa() const;
  void set_pressure_hpa(float value);
  private:
  float _internal_pressure_hpa() const;
  void _internal_set_pressure_hpa(float value);
  public:

  // uint32 gas_resistance_ohm = 10;
  void clear_gas_resistance_ohm();
  uint32_t gas_resistance_ohm() const;
  void set_gas_resistance_ohm(uint32_t value);
  private:
  uint32_t _internal_gas_resistance_ohm() const;
  void _internal_set_gas_resistance_ohm(uint32_t value);
  public:

  // bool gas_valid = 11;
  void clear_gas_valid();
  bool gas_valid() const;
  void set_gas_valid(bool value);
  private:
  bool _internal_gas_valid() const;
  void _internal_set_gas_valid(bool value);
  public:

  // bool heat_stable = 12;
  void clear_heat_stable();
  bool heat_stable() const;
  void set_heat_stable(bool value);
  private:
  bool _internal_heat_stable() const;
  void _internal_set_heat_stable(bool value);
  public:

  // uint64 timestamp = 13;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cedri.SensorReading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heater_profile_;
  float volume_l_;
  uint32_t sensor_id_;
  uint32_t measurement_step_;
  float temp_c_;
  float humidity_pct_;
  float pressure_hpa_;
  uint32_t gas_resistance_ohm_;
  bool gas_valid_;
  bool heat_stable_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_measurement_2eproto;
};
// -------------------------------------------------------------------

class SensorReadingBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cedri.SensorReadingBatch) */ {
 public:
  inline SensorReadingBatch() : SensorReadingBatch(nullptr) {}
  ~SensorReadingBatch() override;
  explicit constexpr SensorReadingBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorReadingBatch(const SensorReadingBatch& from);
  SensorReadingBatch(SensorReadingBatch&& from) noexcept
    : SensorReadingBatch() {
    *this = ::std::move(from);
  }

  inline SensorReadingBatch& operator=(const SensorReadingBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorReadingBatch& operator=(SensorReadingBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorReadingBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorReadingBatch* internal_default_instance() {
    return reinterpret_cast<const SensorReadingBatch*>(
               &_SensorReadingBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorReadingBatch& a, SensorReadingBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorReadingBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorReadingBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorReadingBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorReadingBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorReadingBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SensorReadingBatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorReadingBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cedri.SensorReadingBatch";
  }
  protected:
  explicit SensorReadingBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingsFieldNumber = 1,
  };
  // repeated .cedri.SensorReading readings = 1;
  int readings_size() const;
  private:
  int _internal_readings_size() const;
  public:
  void clear_readings();
  ::cedri::SensorReading* mutable_readings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedri::SensorReading >*
      mutable_readings();
  private:
  const ::cedri::SensorReading& _internal_readings(int index) const;
  ::cedri::SensorReading* _internal_add_readings();
  public:
  const ::cedri::SensorReading& readings(int index) const;
  ::cedri::SensorReading* add_readings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedri::SensorReading >&
      readings() const;

  // @@protoc_insertion_point(class_scope:cedri.SensorReadingBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedri::SensorReading > readings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_measurement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorReading

// string device_id = 1;
inline void SensorReading::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& SensorReading::device_id() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorReading::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cedri.SensorReading.device_id)
}
inline std::string* SensorReading::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:cedri.SensorReading.device_id)
  return _s;
}
inline const std::string& SensorReading::_internal_device_id() const {
  return device_id_.Get();
}
inline void SensorReading::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorReading::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorReading::release_device_id() {
  // @@protoc_insertion_point(field_release:cedri.SensorReading.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorReading::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cedri.SensorReading.device_id)
}

// string location = 2;
inline void SensorReading::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& SensorReading::location() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorReading::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cedri.SensorReading.location)
}
inline std::string* SensorReading::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:cedri.SensorReading.location)
  return _s;
}
inline const std::string& SensorReading::_internal_location() const {
  return location_.Get();
}
inline void SensorReading::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorReading::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorReading::release_location() {
  // @@protoc_insertion_point(field_release:cedri.SensorReading.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorReading::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cedri.SensorReading.location)
}

// float volume_l = 3;
inline void SensorReading::clear_volume_l() {
  volume_l_ = 0;
}
inline float SensorReading::_internal_volume_l() const {
  return volume_l_;
}
inline float SensorReading::volume_l() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.volume_l)
  return _internal_volume_l();
}
inline void SensorReading::_internal_set_volume_l(float value) {
  
  volume_l_ = value;
}
inline void SensorReading::set_volume_l(float value) {
  _internal_set_volume_l(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.volume_l)
}

// uint32 sensor_id = 4;
inline void SensorReading::clear_sensor_id() {
  sensor_id_ = 0u;
}
inline uint32_t SensorReading::_internal_sensor_id() const {
  return sensor_id_;
}
inline uint32_t SensorReading::sensor_id() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.sensor_id)
  return _internal_sensor_id();
}
inline void SensorReading::_internal_set_sensor_id(uint32_t value) {
  
  sensor_id_ = value;
}
inline void SensorReading::set_sensor_id(uint32_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.sensor_id)
}

// string heater_profile = 5;
inline void SensorReading::clear_heater_profile() {
  heater_profile_.ClearToEmpty();
}
inline const std::string& SensorReading::heater_profile() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.heater_profile)
  return _internal_heater_profile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorReading::set_heater_profile(ArgT0&& arg0, ArgT... args) {
 
 heater_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cedri.SensorReading.heater_profile)
}
inline std::string* SensorReading::mutable_heater_profile() {
  std::string* _s = _internal_mutable_heater_profile();
  // @@protoc_insertion_point(field_mutable:cedri.SensorReading.heater_profile)
  return _s;
}
inline const std::string& SensorReading::_internal_heater_profile() const {
  return heater_profile_.Get();
}
inline void SensorReading::_internal_set_heater_profile(const std::string& value) {
  
  heater_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SensorReading::_internal_mutable_heater_profile() {
  
  return heater_profile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SensorReading::release_heater_profile() {
  // @@protoc_insertion_point(field_release:cedri.SensorReading.heater_profile)
  return heater_profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SensorReading::set_allocated_heater_profile(std::string* heater_profile) {
  if (heater_profile != nullptr) {
    
  } else {
    
  }
  heater_profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heater_profile,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (heater_profile_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    heater_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cedri.SensorReading.heater_profile)
}

// uint32 measurement_step = 6;
inline void SensorReading::clear_measurement_step() {
  measurement_step_ = 0u;
}
inline uint32_t SensorReading::_internal_measurement_step() const {
  return measurement_step_;
}
inline uint32_t SensorReading::measurement_step() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.measurement_step)
  return _internal_measurement_step();
}
inline void SensorReading::_internal_set_measurement_step(uint32_t value) {
  
  measurement_step_ = value;
}
inline void SensorReading::set_measurement_step(uint32_t value) {
  _internal_set_measurement_step(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.measurement_step)
}

// float temp_c = 7;
inline void SensorReading::clear_temp_c() {
  temp_c_ = 0;
}
inline float SensorReading::_internal_temp_c() const {
  return temp_c_;
}
inline float SensorReading::temp_c() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.temp_c)
  return _internal_temp_c();
}
inline void SensorReading::_internal_set_temp_c(float value) {
  
  temp_c_ = value;
}
inline void SensorReading::set_temp_c(float value) {
  _internal_set_temp_c(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.temp_c)
}

// float humidity_pct = 8;
inline void SensorReading::clear_humidity_pct() {
  humidity_pct_ = 0;
}
inline float SensorReading::_internal_humidity_pct() const {
  return humidity_pct_;
}
inline float SensorReading::humidity_pct() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.humidity_pct)
  return _internal_humidity_pct();
}
inline void SensorReading::_internal_set_humidity_pct(float value) {
  
  humidity_pct_ = value;
}
inline void SensorReading::set_humidity_pct(float value) {
  _internal_set_humidity_pct(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.humidity_pct)
}

// float pressure_hpa = 9;
inline void SensorReading::clear_pressure_hpa() {
  pressure_hpa_ = 0;
}
inline float SensorReading::_internal_pressure_hpa() const {
  return pressure_hpa_;
}
inline float SensorReading::pressure_hpa() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.pressure_hpa)
  return _internal_pressure_hpa();
}
inline void SensorReading::_internal_set_pressure_hpa(float value) {
  
  pressure_hpa_ = value;
}
inline void SensorReading::set_pressure_hpa(float value) {
  _internal_set_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.pressure_hpa)
}

// uint32 gas_resistance_ohm = 10;
inline void SensorReading::clear_gas_resistance_ohm() {
  gas_resistance_ohm_ = 0u;
}
inline uint32_t SensorReading::_internal_gas_resistance_ohm() const {
  return gas_resistance_ohm_;
}
inline uint32_t SensorReading::gas_resistance_ohm() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.gas_resistance_ohm)
  return _internal_gas_resistance_ohm();
}
inline void SensorReading::_internal_set_gas_resistance_ohm(uint32_t value) {
  
  gas_resistance_ohm_ = value;
}
inline void SensorReading::set_gas_resistance_ohm(uint32_t value) {
  _internal_set_gas_resistance_ohm(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.gas_resistance_ohm)
}

// bool gas_valid = 11;
inline void SensorReading::clear_gas_valid() {
  gas_valid_ = false;
}
inline bool SensorReading::_internal_gas_valid() const {
  return gas_valid_;
}
inline bool SensorReading::gas_valid() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.gas_valid)
  return _internal_gas_valid();
}
inline void SensorReading::_internal_set_gas_valid(bool value) {
  
  gas_valid_ = value;
}
inline void SensorReading::set_gas_valid(bool value) {
  _internal_set_gas_valid(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.gas_valid)
}

// bool heat_stable = 12;
inline void SensorReading::clear_heat_stable() {
  heat_stable_ = false;
}
inline bool SensorReading::_internal_heat_stable() const {
  return heat_stable_;
}
inline bool SensorReading::heat_stable() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.heat_stable)
  return _internal_heat_stable();
}
inline void SensorReading::_internal_set_heat_stable(bool value) {
  
  heat_stable_ = value;
}
inline void SensorReading::set_heat_stable(bool value) {
  _internal_set_heat_stable(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.heat_stable)
}

// uint64 timestamp = 13;
inline void SensorReading::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t SensorReading::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t SensorReading::timestamp() const {
  // @@protoc_insertion_point(field_get:cedri.SensorReading.timestamp)
  return _internal_timestamp();
}
inline void SensorReading::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void SensorReading::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cedri.SensorReading.timestamp)
}

// -------------------------------------------------------------------

// SensorReadingBatch

// repeated .cedri.SensorReading readings = 1;
inline int SensorReadingBatch::_internal_readings_size() const {
  return readings_.size();
}
inline int SensorReadingBatch::readings_size() const {
  return _internal_readings_size();
}
inline void SensorReadingBatch::clear_readings() {
  readings_.Clear();
}
inline ::cedri::SensorReading* SensorReadingBatch::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:cedri.SensorReadingBatch.readings)
  return readings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedri::SensorReading >*
SensorReadingBatch::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:cedri.SensorReadingBatch.readings)
  return &readings_;
}
inline const ::cedri::SensorReading& SensorReadingBatch::_internal_readings(int index) const {
  return readings_.Get(index);
}
inline const ::cedri::SensorReading& SensorReadingBatch::readings(int index) const {
  // @@protoc_insertion_point(field_get:cedri.SensorReadingBatch.readings)
  return _internal_readings(index);
}
inline ::cedri::SensorReading* SensorReadingBatch::_internal_add_readings() {
  return readings_.Add();
}
inline ::cedri::SensorReading* SensorReadingBatch::add_readings() {
  ::cedri::SensorReading* _add = _internal_add_readings();
  // @@protoc_insertion_point(field_add:cedri.SensorReadingBatch.readings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cedri::SensorReading >&
SensorReadingBatch::readings() const {
  // @@protoc_insertion_point(field_list:cedri.SensorReadingBatch.readings)
  return readings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cedri

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_measurement_2eproto
