// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurement.proto

#include "measurement.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cedri {
constexpr SensorReading::SensorReading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , heater_profile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_l_(0)
  , sensor_id_(0u)
  , measurement_step_(0u)
  , temp_c_(0)
  , humidity_pct_(0)
  , pressure_hpa_(0)
  , gas_resistance_ohm_(0u)
  , gas_valid_(false)
  , heat_stable_(false)
  , timestamp_(uint64_t{0u}){}
struct SensorReadingDefaultTypeInternal {
  constexpr SensorReadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorReadingDefaultTypeInternal() {}
  union {
    SensorReading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorReadingDefaultTypeInternal _SensorReading_default_instance_;
constexpr SensorReadingBatch::SensorReadingBatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : readings_(){}
struct SensorReadingBatchDefaultTypeInternal {
  constexpr SensorReadingBatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorReadingBatchDefaultTypeInternal() {}
  union {
    SensorReadingBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorReadingBatchDefaultTypeInternal _SensorReadingBatch_default_instance_;
}  // namespace cedri
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_measurement_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_measurement_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_measurement_2eproto = nullptr;

const uint32_t TableStruct_measurement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, device_id_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, location_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, volume_l_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, heater_profile_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, measurement_step_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, temp_c_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, humidity_pct_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, pressure_hpa_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, gas_resistance_ohm_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, gas_valid_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, heat_stable_),
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReading, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReadingBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cedri::SensorReadingBatch, readings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cedri::SensorReading)},
  { 19, -1, -1, sizeof(::cedri::SensorReadingBatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedri::_SensorReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cedri::_SensorReadingBatch_default_instance_),
};

const char descriptor_table_protodef_measurement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021measurement.proto\022\005cedri\"\236\002\n\rSensorRea"
  "ding\022\021\n\tdevice_id\030\001 \001(\t\022\020\n\010location\030\002 \001("
  "\t\022\020\n\010volume_l\030\003 \001(\002\022\021\n\tsensor_id\030\004 \001(\r\022\026"
  "\n\016heater_profile\030\005 \001(\t\022\030\n\020measurement_st"
  "ep\030\006 \001(\r\022\016\n\006temp_c\030\007 \001(\002\022\024\n\014humidity_pct"
  "\030\010 \001(\002\022\024\n\014pressure_hpa\030\t \001(\002\022\032\n\022gas_resi"
  "stance_ohm\030\n \001(\r\022\021\n\tgas_valid\030\013 \001(\010\022\023\n\013h"
  "eat_stable\030\014 \001(\010\022\021\n\ttimestamp\030\r \001(\004\"<\n\022S"
  "ensorReadingBatch\022&\n\010readings\030\001 \003(\0132\024.ce"
  "dri.SensorReadingb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_measurement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_measurement_2eproto = {
  false, false, 385, descriptor_table_protodef_measurement_2eproto, "measurement.proto", 
  &descriptor_table_measurement_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_measurement_2eproto::offsets,
  file_level_metadata_measurement_2eproto, file_level_enum_descriptors_measurement_2eproto, file_level_service_descriptors_measurement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_measurement_2eproto_getter() {
  return &descriptor_table_measurement_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_measurement_2eproto(&descriptor_table_measurement_2eproto);
namespace cedri {

// ===================================================================

class SensorReading::_Internal {
 public:
};

SensorReading::SensorReading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cedri.SensorReading)
}
SensorReading::SensorReading(const SensorReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  heater_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    heater_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_heater_profile().empty()) {
    heater_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_heater_profile(), 
      GetArenaForAllocation());
  }
  ::memcpy(&volume_l_, &from.volume_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&volume_l_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:cedri.SensorReading)
}

inline void SensorReading::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
heater_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  heater_profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&volume_l_)) + sizeof(timestamp_));
}

SensorReading::~SensorReading() {
  // @@protoc_insertion_point(destructor:cedri.SensorReading)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorReading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heater_profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorReading::ArenaDtor(void* object) {
  SensorReading* _this = reinterpret_cast< SensorReading* >(object);
  (void)_this;
}
void SensorReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorReading::Clear() {
// @@protoc_insertion_point(message_clear_start:cedri.SensorReading)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  location_.ClearToEmpty();
  heater_profile_.ClearToEmpty();
  ::memset(&volume_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&volume_l_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedri.SensorReading.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedri.SensorReading.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float volume_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          volume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 sensor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string heater_profile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_heater_profile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cedri.SensorReading.heater_profile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 measurement_step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          measurement_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temp_c = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          temp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float humidity_pct = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          humidity_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pressure_hpa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          pressure_hpa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 gas_resistance_ohm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          gas_resistance_ohm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gas_valid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          gas_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool heat_stable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          heat_stable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorReading::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedri.SensorReading)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedri.SensorReading.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string location = 2;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedri.SensorReading.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  // float volume_l = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume_l = this->_internal_volume_l();
  uint32_t raw_volume_l;
  memcpy(&raw_volume_l, &tmp_volume_l, sizeof(tmp_volume_l));
  if (raw_volume_l != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_volume_l(), target);
  }

  // uint32 sensor_id = 4;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sensor_id(), target);
  }

  // string heater_profile = 5;
  if (!this->_internal_heater_profile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_heater_profile().data(), static_cast<int>(this->_internal_heater_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cedri.SensorReading.heater_profile");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_heater_profile(), target);
  }

  // uint32 measurement_step = 6;
  if (this->_internal_measurement_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_measurement_step(), target);
  }

  // float temp_c = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temp_c = this->_internal_temp_c();
  uint32_t raw_temp_c;
  memcpy(&raw_temp_c, &tmp_temp_c, sizeof(tmp_temp_c));
  if (raw_temp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_temp_c(), target);
  }

  // float humidity_pct = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_humidity_pct = this->_internal_humidity_pct();
  uint32_t raw_humidity_pct;
  memcpy(&raw_humidity_pct, &tmp_humidity_pct, sizeof(tmp_humidity_pct));
  if (raw_humidity_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_humidity_pct(), target);
  }

  // float pressure_hpa = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pressure_hpa = this->_internal_pressure_hpa();
  uint32_t raw_pressure_hpa;
  memcpy(&raw_pressure_hpa, &tmp_pressure_hpa, sizeof(tmp_pressure_hpa));
  if (raw_pressure_hpa != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pressure_hpa(), target);
  }

  // uint32 gas_resistance_ohm = 10;
  if (this->_internal_gas_resistance_ohm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gas_resistance_ohm(), target);
  }

  // bool gas_valid = 11;
  if (this->_internal_gas_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_gas_valid(), target);
  }

  // bool heat_stable = 12;
  if (this->_internal_heat_stable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_heat_stable(), target);
  }

  // uint64 timestamp = 13;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedri.SensorReading)
  return target;
}

size_t SensorReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedri.SensorReading)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string location = 2;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string heater_profile = 5;
  if (!this->_internal_heater_profile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heater_profile());
  }

  // float volume_l = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume_l = this->_internal_volume_l();
  uint32_t raw_volume_l;
  memcpy(&raw_volume_l, &tmp_volume_l, sizeof(tmp_volume_l));
  if (raw_volume_l != 0) {
    total_size += 1 + 4;
  }

  // uint32 sensor_id = 4;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 measurement_step = 6;
  if (this->_internal_measurement_step() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_measurement_step());
  }

  // float temp_c = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temp_c = this->_internal_temp_c();
  uint32_t raw_temp_c;
  memcpy(&raw_temp_c, &tmp_temp_c, sizeof(tmp_temp_c));
  if (raw_temp_c != 0) {
    total_size += 1 + 4;
  }

  // float humidity_pct = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_humidity_pct = this->_internal_humidity_pct();
  uint32_t raw_humidity_pct;
  memcpy(&raw_humidity_pct, &tmp_humidity_pct, sizeof(tmp_humidity_pct));
  if (raw_humidity_pct != 0) {
    total_size += 1 + 4;
  }

  // float pressure_hpa = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pressure_hpa = this->_internal_pressure_hpa();
  uint32_t raw_pressure_hpa;
  memcpy(&raw_pressure_hpa, &tmp_pressure_hpa, sizeof(tmp_pressure_hpa));
  if (raw_pressure_hpa != 0) {
    total_size += 1 + 4;
  }

  // uint32 gas_resistance_ohm = 10;
  if (this->_internal_gas_resistance_ohm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gas_resistance_ohm());
  }

  // bool gas_valid = 11;
  if (this->_internal_gas_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool heat_stable = 12;
  if (this->_internal_heat_stable() != 0) {
    total_size += 1 + 1;
  }

  // uint64 timestamp = 13;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorReading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorReading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorReading::GetClassData() const { return &_class_data_; }

void SensorReading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorReading *>(to)->MergeFrom(
      static_cast<const SensorReading &>(from));
}


void SensorReading::MergeFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedri.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (!from._internal_heater_profile().empty()) {
    _internal_set_heater_profile(from._internal_heater_profile());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_volume_l = from._internal_volume_l();
  uint32_t raw_volume_l;
  memcpy(&raw_volume_l, &tmp_volume_l, sizeof(tmp_volume_l));
  if (raw_volume_l != 0) {
    _internal_set_volume_l(from._internal_volume_l());
  }
  if (from._internal_sensor_id() != 0) {
    _internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_measurement_step() != 0) {
    _internal_set_measurement_step(from._internal_measurement_step());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temp_c = from._internal_temp_c();
  uint32_t raw_temp_c;
  memcpy(&raw_temp_c, &tmp_temp_c, sizeof(tmp_temp_c));
  if (raw_temp_c != 0) {
    _internal_set_temp_c(from._internal_temp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_humidity_pct = from._internal_humidity_pct();
  uint32_t raw_humidity_pct;
  memcpy(&raw_humidity_pct, &tmp_humidity_pct, sizeof(tmp_humidity_pct));
  if (raw_humidity_pct != 0) {
    _internal_set_humidity_pct(from._internal_humidity_pct());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pressure_hpa = from._internal_pressure_hpa();
  uint32_t raw_pressure_hpa;
  memcpy(&raw_pressure_hpa, &tmp_pressure_hpa, sizeof(tmp_pressure_hpa));
  if (raw_pressure_hpa != 0) {
    _internal_set_pressure_hpa(from._internal_pressure_hpa());
  }
  if (from._internal_gas_resistance_ohm() != 0) {
    _internal_set_gas_resistance_ohm(from._internal_gas_resistance_ohm());
  }
  if (from._internal_gas_valid() != 0) {
    _internal_set_gas_valid(from._internal_gas_valid());
  }
  if (from._internal_heat_stable() != 0) {
    _internal_set_heat_stable(from._internal_heat_stable());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorReading::CopyFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedri.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReading::IsInitialized() const {
  return true;
}

void SensorReading::InternalSwap(SensorReading* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &heater_profile_, lhs_arena,
      &other->heater_profile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorReading, timestamp_)
      + sizeof(SensorReading::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SensorReading, volume_l_)>(
          reinterpret_cast<char*>(&volume_l_),
          reinterpret_cast<char*>(&other->volume_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorReading::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_measurement_2eproto_getter, &descriptor_table_measurement_2eproto_once,
      file_level_metadata_measurement_2eproto[0]);
}

// ===================================================================

class SensorReadingBatch::_Internal {
 public:
};

SensorReadingBatch::SensorReadingBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  readings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cedri.SensorReadingBatch)
}
SensorReadingBatch::SensorReadingBatch(const SensorReadingBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      readings_(from.readings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cedri.SensorReadingBatch)
}

inline void SensorReadingBatch::SharedCtor() {
}

SensorReadingBatch::~SensorReadingBatch() {
  // @@protoc_insertion_point(destructor:cedri.SensorReadingBatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorReadingBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorReadingBatch::ArenaDtor(void* object) {
  SensorReadingBatch* _this = reinterpret_cast< SensorReadingBatch* >(object);
  (void)_this;
}
void SensorReadingBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorReadingBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorReadingBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:cedri.SensorReadingBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorReadingBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cedri.SensorReading readings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorReadingBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cedri.SensorReadingBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cedri.SensorReading readings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_readings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_readings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cedri.SensorReadingBatch)
  return target;
}

size_t SensorReadingBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cedri.SensorReadingBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cedri.SensorReading readings = 1;
  total_size += 1UL * this->_internal_readings_size();
  for (const auto& msg : this->readings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorReadingBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorReadingBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorReadingBatch::GetClassData() const { return &_class_data_; }

void SensorReadingBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorReadingBatch *>(to)->MergeFrom(
      static_cast<const SensorReadingBatch &>(from));
}


void SensorReadingBatch::MergeFrom(const SensorReadingBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cedri.SensorReadingBatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorReadingBatch::CopyFrom(const SensorReadingBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cedri.SensorReadingBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReadingBatch::IsInitialized() const {
  return true;
}

void SensorReadingBatch::InternalSwap(SensorReadingBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  readings_.InternalSwap(&other->readings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorReadingBatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_measurement_2eproto_getter, &descriptor_table_measurement_2eproto_once,
      file_level_metadata_measurement_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cedri
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cedri::SensorReading* Arena::CreateMaybeMessage< ::cedri::SensorReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedri::SensorReading >(arena);
}
template<> PROTOBUF_NOINLINE ::cedri::SensorReadingBatch* Arena::CreateMaybeMessage< ::cedri::SensorReadingBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cedri::SensorReadingBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
